name: "CI"
on: [push, pull_request]
jobs:
  soundness:
    name: Soundness Check
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Bootstrap Mint
        uses: irgaly/setup-mint@v1

      - name: Run soundness
        run: |
          scripts/soundness.sh
          exit $(git status --porcelain | wc -l)

  unit-test:
    name: Unit Test
    runs-on: ubuntu-24.04

    strategy:
      fail-fast: false
      matrix:
        swift: ["latest", "6.2-snapshot"]

    steps:
      - name: Install Swift
        uses: vapor/swiftly-action@v0.2.0
        with:
          toolchain: ${{ matrix.swift }}
        env:
          SWIFTLY_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Resolve Swift dependencies
        run: swift package resolve

      - name: Run Unit Tests
        run: swift test --enable-code-coverage

      - name: Merge code coverage
        if: matrix.swift == 'latest'
        run: |
          llvm-cov export -format "lcov" \
            .build/debug/swift-otelPackageTests.xctest \
            -ignore-filename-regex="\/Tests\/" \
            -ignore-filename-regex="\/Generated\/" \
            -ignore-filename-regex="\/.build\/" \
            -instr-profile=./.build/debug/codecov/default.profdata \
          > info.lcov

      - name: Upload code coverage report to Codecov
        if: matrix.swift == 'latest'
        uses: codecov/codecov-action@v5.4.3
        with:
          files: ./info.lcov
          fail_ci_if_error: true
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  check-docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    container:
      image: swift:6.1-noble
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Run documentation check
        run: |
          which curl yq || (apt -q update && apt -yq install curl yq)
          scripts/check-docs.sh

  construct-examples-matrix:
    name: Example Package (Construct Matrix)
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.find-examples.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Find examples
        id: find-examples
        run: |
          find Examples/ -maxdepth 2 -name Package.swift -type f -print0 \
          | xargs -0 dirname \
          | jq -Rrs 'split("\n") | map(select(length > 0)) | {example: .}| @json | "matrix=\(.)"' \
          | tee -a $GITHUB_OUTPUT

  test-examples:
    name: Example Package
    runs-on: ubuntu-latest
    needs: construct-examples-matrix
    strategy:
      matrix: ${{ fromJSON(needs.construct-examples-matrix.outputs.matrix) }}
      fail-fast: false
    defaults:
      run:
        working-directory: ${{ matrix.example }}
    steps:
      - name: Install Swift
        uses: vapor/swiftly-action@v0.2.0
        with:
          toolchain: latest
        env:
          SWIFTLY_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v4.2.2
      - name: Override example package dependency on root package
        run: swift package edit swift-otel --path ${{ github.workspace }}
      - name: Resolve example package dependencies
        run: swift package resolve
      - name: Build example package
        run: swift build
      - name: Check if example package has tests
        id: check-for-tests
        run: |
          if test -d Tests/; then
            echo "example_has_tests=true" | tee -a $GITHUB_OUTPUT
          fi
      - name: Run example package tests
        run: swift test
        if: steps.check-for-tests.outputs.example_has_tests == 'true'

  collect-examples:
    name: Example Package (All)
    runs-on: ubuntu-latest
    needs: test-examples
    if: always()
    steps:
      - name: Check all example jobs succeeded
        run: |
          if [[ "${{ needs.test-examples.result }}" != "success" ]]; then
            echo "One or more example matrix jobs failed; failing job."
            exit 1
          fi
          echo "All example matrix jobs succeeded."
