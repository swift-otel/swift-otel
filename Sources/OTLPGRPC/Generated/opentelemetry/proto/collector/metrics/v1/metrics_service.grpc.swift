//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: opentelemetry/proto/collector/metrics/v1/metrics_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf
import OTLPCore


/// Service that can be used to push metrics between one Application
/// instrumented with OpenTelemetry and a collector, or between a collector and a
/// central collector.
///
/// Usage: instantiate `Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceClient`, then call methods of this protocol to make API calls.
internal protocol Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceClientInterceptorFactoryProtocol? { get }

  func export(
    _ request: Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest, Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse>
}

extension Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceClientProtocol {
  internal var serviceName: String {
    return "opentelemetry.proto.collector.metrics.v1.MetricsService"
  }

  /// For performance reasons, it is recommended to keep this RPC
  /// alive for the entire life of the application.
  ///
  /// - Parameters:
  ///   - request: Request to send to Export.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func export(
    _ request: Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest, Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse> {
    return self.makeUnaryCall(
      path: Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceClientMetadata.Methods.export.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExportInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceNIOClient")
internal final class Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceClient: Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the opentelemetry.proto.collector.metrics.v1.MetricsService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceNIOClient: Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the opentelemetry.proto.collector.metrics.v1.MetricsService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Service that can be used to push metrics between one Application
/// instrumented with OpenTelemetry and a collector, or between a collector and a
/// central collector.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceClientInterceptorFactoryProtocol? { get }

  func makeExportCall(
    _ request: Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest, Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeExportCall(
    _ request: Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest, Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse> {
    return self.makeAsyncUnaryCall(
      path: Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceClientMetadata.Methods.export.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExportInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceAsyncClientProtocol {
  internal func export(
    _ request: Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse {
    return try await self.performAsyncUnaryCall(
      path: Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceClientMetadata.Methods.export.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExportInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceAsyncClient: Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'export'.
  func makeExportInterceptors() -> [ClientInterceptor<Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest, Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse>]
}

internal enum Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MetricsService",
    fullName: "opentelemetry.proto.collector.metrics.v1.MetricsService",
    methods: [
      Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceClientMetadata.Methods.export,
    ]
  )

  internal enum Methods {
    internal static let export = GRPCMethodDescriptor(
      name: "Export",
      path: "/opentelemetry.proto.collector.metrics.v1.MetricsService/Export",
      type: GRPCCallType.unary
    )
  }
}

